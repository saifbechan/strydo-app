{"version":3,"sources":["classes/card.class.js","redux/board-data.js","redux/board/board.types.js","redux/board/board.reducer.js","redux/root-reducer.js","redux/store.js","global.styles.js","App.styles.js","components/header/header.styles.jsx","components/header/header.component.jsx","dnd/itemtypes.js","components/remove-card/remove-card.styles.jsx","components/remove-card/remove-card.component.jsx","redux/board/board.action.js","components/move-card/move-card.styles.jsx","components/move-card/move-card.component.jsx","components/card/card.styles.js","components/card/card.component.jsx","components/column/column.styles.js","components/column/column.component.jsx","components/add-card/add-card.styles.js","components/add-card/add-card.component.jsx","App.js","index.js"],"names":["lorem","LoremIpsum","wordsPerSentence","max","min","Card","id","uuidv1","content","generateSentences","getId","getContent","toJSON","this","title","backgroundColor","randomColor","cards","BoardActionTypes","GET_BOARD_DATA","REMOVE_CARD","ADD_CARD","MOVE_CARD","INITIAL_STATE","columns","rootReducer","combineReducers","board","state","action","type","boardData","map","column","payload","push","cardsToMove","cloumnsWithCardRemoved","columnId","filter","card","cardId","targetColumnId","splice","targetCardIndex","store","createStore","applyMiddleware","GlobalStyle","createGlobalStyle","ColumnsContainer","styled","div","HeaderComponent","HeaderLogoComponent","img","HeaderTitleComponent","h1","HeaderSubTitleComponent","h2","Header","src","process","ItemTypes","RemoveCardContainer","button","connect","dispatch","removeCard","data-testid","onClick","MoveCardContainer","isOver","MoveCardPlaceholderContainer","MoveCard","idx","moveCard","useDrop","accept","drop","item","targetIndex","collect","monitor","canDrop","ref","CardContainer","children","useDrag","isDragging","drag","ColumnContainer","H3Container","h3","CardsContainer","Column","key","AddCardContainer","addCard","getBoardData","useEffect","Fragment","ReactDOM","render","DndProvider","backend","Backend","document","getElementById"],"mappings":"sQAGMA,EAAQ,I,MAAIC,YAAW,CAC3BC,iBAAkB,CAChBC,IAAK,EACLC,IAAK,KAoBMC,EAfb,aAAkE,IAAD,OAArDC,EAAqD,uDAAhDC,MAAUC,EAAsC,uDAA5BR,EAAMS,kBAAkB,GAAI,yBAKjEC,MAAQ,kBAAM,EAAKJ,IAL8C,KAOjEK,WAAa,kBAAM,EAAKH,SAPyC,KASjEI,OAAS,iBAAO,CACdN,GAAI,EAAKA,GACTE,QAAS,EAAKA,UAVdK,KAAKP,GAAKA,EACVO,KAAKL,QAAUA,GCRJ,mBAAM,CACnB,CACEF,GAAIC,MACJO,MAAO,UACPC,gBAAiBC,MACjBC,MAAO,EACL,IAAIZ,GAAOO,UACX,IAAIP,GAAOO,UACX,IAAIP,GAAOO,UACX,IAAIP,GAAOO,UACX,IAAIP,GAAOO,WAGf,CACEN,GAAIC,MACJO,MAAO,QACPC,gBAAiBC,MACjBC,MAAO,EACL,IAAIZ,GAAOO,UACX,IAAIP,GAAOO,UACX,IAAIP,GAAOO,UACX,IAAIP,GAAOO,UACX,IAAIP,GAAOO,WAGf,CACEN,GAAIC,MACJO,MAAO,cACPC,gBAAiBC,MACjBC,MAAO,EACL,IAAIZ,GAAOO,UACX,IAAIP,GAAOO,UACX,IAAIP,GAAOO,UACX,IAAIP,GAAOO,UACX,IAAIP,GAAOO,WAGf,CACEN,GAAIC,MACJO,MAAO,OACPC,gBAAiBC,MACjBC,MAAO,EACL,IAAIZ,GAAOO,UACX,IAAIP,GAAOO,UACX,IAAIP,GAAOO,UACX,IAAIP,GAAOO,UACX,IAAIP,GAAOO,WAGf,CACEN,GAAIC,MACJO,MAAO,OACPC,gBAAiBC,MACjBC,MAAO,EACL,IAAIZ,GAAOO,UACX,IAAIP,GAAOO,UACX,IAAIP,GAAOO,UACX,IAAIP,GAAOO,UACX,IAAIP,GAAOO,aCxDFM,EAPU,CACvBC,eAAgB,iBAChBC,YAAa,cACbC,SAAU,WACVC,UAAW,aCAAC,EAAgB,CAC3BC,QAAS,ICGIC,EAJKC,YAAgB,CAClCC,MDG0B,WAAoC,IAAnCC,EAAkC,uDAA1BL,EAAeM,EAAW,uCAC7D,OAAQA,EAAOC,MACb,KAAKZ,EAAiBC,eACpB,OAAO,eACFS,EADL,CAEEJ,QAASO,MAEb,KAAKb,EAAiBG,SACpB,OAAO,eACFO,EADL,CAEEJ,QAASI,EAAMJ,QAAQQ,KAAI,SAAAC,GAIzB,OAHIA,EAAO3B,KAAOuB,EAAOK,SACvBD,EAAOhB,MAAMkB,MAAK,IAAI9B,GAAOO,UAExBqB,OAGb,KAAKf,EAAiBI,UACpB,IAAMc,EAAc,GACdC,EAAyBT,EAAMJ,QAAQQ,KAAI,SAAAC,GAU/C,OATIA,EAAO3B,KAAOuB,EAAOK,QAAQI,WAC/BL,EAAOhB,MAAQgB,EAAOhB,MAAMsB,QAAO,SAAAC,GACjC,OAAIA,EAAKlC,KAAOuB,EAAOK,QAAQO,SAG/BL,EAAYD,KAAKK,IACV,OAGJP,KAGT,OAAO,eACFL,EADL,CAEEJ,QAASa,EAAuBL,KAAI,SAAAC,GACgB,IAAD,EAA7CA,EAAO3B,KAAOuB,EAAOK,QAAQQ,iBAC/B,EAAAT,EAAOhB,OAAM0B,OAAb,SACEd,EAAOK,QAAQU,gBACf,GAFF,OAGKR,IAGP,OAAOH,OAGb,KAAKf,EAAiBE,YACpB,OAAO,eACFQ,EADL,CAEEJ,QAASI,EAAMJ,QAAQQ,KAAI,SAAAC,GAMzB,OALIA,EAAO3B,KAAOuB,EAAOK,QAAQI,WAC/BL,EAAOhB,MAAQgB,EAAOhB,MAAMsB,QAC1B,SAAAC,GAAI,OAAIA,EAAKlC,KAAOuB,EAAOK,QAAQO,WAGhCR,OAGb,QACE,OAAOL,MEvDb,IAEeiB,EAFDC,YAAYrB,EAAasB,IAAe,WAAf,EANnB,K,oYCHb,IAAMC,EAAcC,YAAH,K,0JCAjB,IAAMC,EAAmBC,IAAOC,IAAV,K,2nBCAtB,IAAMC,EAAkBF,IAAOC,IAAV,KAMfE,EAAsBH,IAAOI,IAAV,KAOnBC,EAAuBL,IAAOM,GAAV,KAQpBC,EAA0BP,IAAOQ,GAAV,KCLrBC,EAVA,kBACb,kBAACP,EAAD,KACE,kBAACC,EAAD,CAAqBO,IAAG,UAAKC,cAAL,eACxB,kBAACN,EAAD,mBACA,kBAACE,EAAD,kD,gBCZSK,EACL,O,8MCCD,IAAMC,EAAsBb,IAAOc,OAAV,KCmBjBC,cAAQ,MALI,SAAAC,GAAQ,MAAK,CACtCC,WAAY,gBAAG9B,EAAH,EAAGA,SAAUG,EAAb,EAAaA,OAAb,OACV0B,ECZsB,SAAC,GAAD,IAAG7B,EAAH,EAAGA,SAAUG,EAAb,EAAaA,OAAb,MAA2B,CACnDX,KAAMZ,EAAiBE,YACvBc,QAAS,CAAEI,WAAUG,WDUV2B,CAAW,CAAE9B,WAAUG,gBAGrByB,EAdW,SAAC,GAAD,IAAG5B,EAAH,EAAGA,SAAUG,EAAb,EAAaA,OAAQ2B,EAArB,EAAqBA,WAArB,OACxB,kBAACJ,EAAD,CACEK,cAAY,sBACZC,QAAS,kBAAMF,EAAW,CAAE9B,WAAUG,aAFxC,oB,4OENK,IAAM8B,EAAoBpB,IAAOC,IAAV,KAClB,qBAAGoB,OAAuB,QAAU,SAInCC,EAA+BtB,IAAOC,IAAV,KACzB,qBAAGoB,OAAuB,OAAS,UACvC,qBAAGA,OAAuB,kBAAoB,UCI7CE,EAAW,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,IAAKrC,EAAyB,EAAzBA,SAAUsC,EAAe,EAAfA,SAAe,EAC5BC,YAAQ,CACjCC,OAAQf,EACRgB,KAAM,SAAAC,GAAI,OACRJ,EAAS,CACPtC,SAAU0C,EAAK1C,SACfG,OAAQuC,EAAK1E,GACboC,eAAgBJ,EAChB2C,YAAaN,KAEjBO,QAAS,SAAAC,GAAO,MAAK,CACnBX,SAAUW,EAAQX,SAClBY,UAAWD,EAAQC,cAZgC,mBAC9CZ,EAD8C,KAC9CA,OAAUO,EADoC,KAgBvD,OACE,kBAACR,EAAD,CACEc,IAAKN,EACLP,OAAQA,EACRH,cAAY,qBAEZ,kBAACI,EAAD,CAA8BD,OAAQA,MAU7BN,cAAQ,MALI,SAAAC,GAAQ,MAAK,CACtCS,SAAU,gBAAGtC,EAAH,EAAGA,SAAUG,EAAb,EAAaA,OAAQC,EAArB,EAAqBA,eAAgBuC,EAArC,EAAqCA,YAArC,OACRd,EF1BoB,SAAC,GAAD,IACtB7B,EADsB,EACtBA,SACAG,EAFsB,EAEtBA,OACAC,EAHsB,EAGtBA,eACAuC,EAJsB,EAItBA,YAJsB,MAKjB,CACLnD,KAAMZ,EAAiBI,UACvBY,QAAS,CAAEI,WAAUG,SAAQC,iBAAgBuC,gBEmBlCL,CAAS,CAAEtC,WAAUG,SAAQC,iBAAgBuC,qBAG3Cf,CAAkCQ,G,oMC3C1C,IAAMY,EAAgBnC,IAAOC,IAAV,KCQb/C,GAAO,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,GAAIqE,EAA8B,EAA9BA,IAAKrC,EAAyB,EAAzBA,SAAUiD,EAAe,EAAfA,SAAe,EACxBC,YAAQ,CACrCR,KAAM,CAAElD,KAAMiC,EAAgBzD,KAAIgC,YAClC4C,QAAS,SAAAC,GAAO,MAAK,CACnBM,aAAcN,EAAQM,iBAJ6B,mBAC9CA,EAD8C,KAC9CA,WAAcC,EADgC,KAQvD,OACE,6BACE,kBAACJ,EAAD,CACEhF,GAAIA,EACJ+D,cAAY,OACZgB,IAAKK,EACLD,WAAYA,GAEXF,EACD,kBAAC,EAAD,CAAYjD,SAAUA,EAAUG,OAAQnC,KAE1C,kBAAC,EAAD,CAAUqE,MAAOA,EAAKrC,SAAUA,M,mWC3B/B,IAAMqD,GAAkBxC,IAAOC,IAAV,MAIfwC,GAAczC,IAAO0C,GAAV,MACF,gBAAG9E,EAAH,EAAGA,gBAAH,gBAA4BA,MAMrC+E,GAAiB3C,IAAOC,IAAV,MCQZ2C,GAdO,SAAC,GAAD,IAAGzF,EAAH,EAAGA,GAAIQ,EAAP,EAAOA,MAAOC,EAAd,EAAcA,gBAAiBE,EAA/B,EAA+BA,MAA/B,OACpB,kBAAC0E,GAAD,CAAiBrF,GAAIA,GACnB,kBAACsF,GAAD,CAAa7E,gBAAiBA,GAAkBD,GAChD,kBAACgF,GAAD,KACE,kBAAC,EAAD,CAAUnB,IAAK,EAAGrC,SAAUhC,IAC3BW,EAAMe,KAAI,SAACQ,EAAMmC,GAAP,OACT,kBAAC,GAAD,CAAMqB,IAAKxD,EAAKlC,GAAIA,GAAIkC,EAAKlC,GAAIqE,IAAKA,EAAKrC,SAAUhC,GAClDkC,EAAKhC,e,gNCZT,IAAMyF,GAAmB9C,IAAOc,OAAV,MCkBdC,eAAQ,MAJI,SAAAC,GAAQ,MAAK,CACtC+B,QAAS,SAAA5D,GAAQ,OAAI6B,ERNA,SAAA7B,GAAQ,MAAK,CAClCR,KAAMZ,EAAiBG,SACvBa,QAASI,GQIqB4D,CAAQ5D,QAGzB4B,EAbQ,SAAC,GAAD,IAAG5B,EAAH,EAAGA,SAAU4D,EAAb,EAAaA,QAAb,OACrB,kBAACD,GAAD,CACE5B,cAAY,mBACZC,QAAS,kBAAM4B,EAAQ5D,KAFzB,iBCiCa4B,gBARS,SAAC,GAAD,MAA6B,CACnD1C,QADsB,EAAGG,MAASH,YAIT,SAAA2C,GAAQ,MAAK,CACtCgC,aAAc,kBAAMhC,ETpCa,CACjCrC,KAAMZ,EAAiBC,qBSsCV+C,EA7BH,SAAC,GAA+B,IAA7B1C,EAA4B,EAA5BA,QAAS2E,EAAmB,EAAnBA,aAKtB,OAJAC,qBAAU,WACRD,MACC,CAACA,IAGF,kBAAC,IAAME,SAAP,KACE,kBAACrD,EAAD,MACA,kBAAC,EAAD,MACA,kBAACE,EAAD,KACG1B,EAAQQ,KAAI,SAAAC,GAAM,OACjB,yBAAK+D,IAAK/D,EAAO3B,IACf,kBAAC,GAAW2B,GACZ,kBAAC,GAAD,CAASK,SAAUL,EAAO3B,cChBtCgG,IAASC,OACP,kBAAC,IAAD,CAAU1D,MAAOA,GACf,kBAAC2D,EAAA,EAAD,CAAaC,QAASC,KACpB,kBAAC,GAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.81ce9d7e.chunk.js","sourcesContent":["import uuidv1 from 'uuid/v1';\r\nimport { LoremIpsum } from 'lorem-ipsum';\r\n\r\nconst lorem = new LoremIpsum({\r\n  wordsPerSentence: {\r\n    max: 6,\r\n    min: 3\r\n  }\r\n});\r\n\r\nclass Card {\r\n  constructor(id = uuidv1(), content = lorem.generateSentences(2)) {\r\n    this.id = id;\r\n    this.content = content;\r\n  }\r\n\r\n  getId = () => this.id;\r\n\r\n  getContent = () => this.content;\r\n\r\n  toJSON = () => ({\r\n    id: this.id,\r\n    content: this.content\r\n  });\r\n}\r\n\r\nexport default Card;\r\n","import uuidv1 from 'uuid/v1';\r\nimport randomColor from 'randomcolor';\r\n\r\nimport Card from './../classes/card.class';\r\n\r\nexport default () => [\r\n  {\r\n    id: uuidv1(),\r\n    title: 'Backlog',\r\n    backgroundColor: randomColor(),\r\n    cards: [\r\n      new Card().toJSON(),\r\n      new Card().toJSON(),\r\n      new Card().toJSON(),\r\n      new Card().toJSON(),\r\n      new Card().toJSON()\r\n    ]\r\n  },\r\n  {\r\n    id: uuidv1(),\r\n    title: 'To do',\r\n    backgroundColor: randomColor(),\r\n    cards: [\r\n      new Card().toJSON(),\r\n      new Card().toJSON(),\r\n      new Card().toJSON(),\r\n      new Card().toJSON(),\r\n      new Card().toJSON()\r\n    ]\r\n  },\r\n  {\r\n    id: uuidv1(),\r\n    title: 'In progress',\r\n    backgroundColor: randomColor(),\r\n    cards: [\r\n      new Card().toJSON(),\r\n      new Card().toJSON(),\r\n      new Card().toJSON(),\r\n      new Card().toJSON(),\r\n      new Card().toJSON()\r\n    ]\r\n  },\r\n  {\r\n    id: uuidv1(),\r\n    title: 'Test',\r\n    backgroundColor: randomColor(),\r\n    cards: [\r\n      new Card().toJSON(),\r\n      new Card().toJSON(),\r\n      new Card().toJSON(),\r\n      new Card().toJSON(),\r\n      new Card().toJSON()\r\n    ]\r\n  },\r\n  {\r\n    id: uuidv1(),\r\n    title: 'Done',\r\n    backgroundColor: randomColor(),\r\n    cards: [\r\n      new Card().toJSON(),\r\n      new Card().toJSON(),\r\n      new Card().toJSON(),\r\n      new Card().toJSON(),\r\n      new Card().toJSON()\r\n    ]\r\n  }\r\n];\r\n","const BoardActionTypes = {\r\n  GET_BOARD_DATA: 'GET_BOARD_DATA',\r\n  REMOVE_CARD: 'REMOVE_CARD',\r\n  ADD_CARD: 'ADD_CARD',\r\n  MOVE_CARD: 'MOVE_CARD'\r\n};\r\n\r\nexport default BoardActionTypes;\r\n","import boardData from '../board-data';\r\nimport BoardActionTypes from './board.types';\r\nimport Card from './../../classes/card.class';\r\n\r\nexport const INITIAL_STATE = {\r\n  columns: []\r\n};\r\n\r\nexport const boardReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case BoardActionTypes.GET_BOARD_DATA:\r\n      return {\r\n        ...state,\r\n        columns: boardData()\r\n      };\r\n    case BoardActionTypes.ADD_CARD:\r\n      return {\r\n        ...state,\r\n        columns: state.columns.map(column => {\r\n          if (column.id === action.payload) {\r\n            column.cards.push(new Card().toJSON());\r\n          }\r\n          return column;\r\n        })\r\n      };\r\n    case BoardActionTypes.MOVE_CARD:\r\n      const cardsToMove = [];\r\n      const cloumnsWithCardRemoved = state.columns.map(column => {\r\n        if (column.id === action.payload.columnId) {\r\n          column.cards = column.cards.filter(card => {\r\n            if (card.id !== action.payload.cardId) {\r\n              return true;\r\n            }\r\n            cardsToMove.push(card);\r\n            return false;\r\n          });\r\n        }\r\n        return column;\r\n      });\r\n\r\n      return {\r\n        ...state,\r\n        columns: cloumnsWithCardRemoved.map(column => {\r\n          if (column.id === action.payload.targetColumnId) {\r\n            column.cards.splice(\r\n              action.payload.targetCardIndex,\r\n              0,\r\n              ...cardsToMove\r\n            );\r\n          }\r\n          return column;\r\n        })\r\n      };\r\n    case BoardActionTypes.REMOVE_CARD:\r\n      return {\r\n        ...state,\r\n        columns: state.columns.map(column => {\r\n          if (column.id === action.payload.columnId) {\r\n            column.cards = column.cards.filter(\r\n              card => card.id !== action.payload.cardId\r\n            );\r\n          }\r\n          return column;\r\n        })\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from 'redux';\r\n\r\nimport { boardReducer } from './board/board.reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n  board: boardReducer\r\n});\r\n\r\nexport default rootReducer;\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport logger from 'redux-logger';\r\n\r\nimport rootReducer from './root-reducer';\r\n\r\nconst middlewares = [];\r\n\r\nif (process.env.NODE_ENV === 'development') {\r\n  middlewares.push(logger);\r\n}\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(...middlewares));\r\n\r\nexport default store;\r\n","import { createGlobalStyle } from 'styled-components';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  body {\r\n    margin: 0;\r\n    font-family: 'Lato', sans-serif;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n    overflow-y: scroll;\r\n  }\r\n\r\n  code {\r\n    font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\r\n      monospace;\r\n  }\r\n`;\r\n","import styled from 'styled-components';\r\n\r\nexport const ColumnsContainer = styled.div`\r\n  display: grid;\r\n  grid-auto-flow: column;\r\n  grid-gap: 15px;\r\n  margin: 0 75px;\r\n`;\r\n","import styled from 'styled-components';\r\n\r\nexport const HeaderComponent = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 140px auto;\r\n  margin: 0 0 0 100px;\r\n`;\r\n\r\nexport const HeaderLogoComponent = styled.img`\r\n  grid-row-start: 1;\r\n  grid-row-end: 3;\r\n  margin: 20px 0;\r\n  padding: 0;\r\n`;\r\n\r\nexport const HeaderTitleComponent = styled.h1`\r\n  font-family: 'Lato';\r\n  font-size: 3em;\r\n  font-weight: bold;\r\n  margin: 30px 0 0;\r\n  padding: 0;\r\n`;\r\n\r\nexport const HeaderSubTitleComponent = styled.h2`\r\n  color: grey;\r\n  font-size: 1em;\r\n  font-style: italic;\r\n  margin: 0 0 25px;\r\n  padding: 0;\r\n`;\r\n","import React from 'react';\r\nimport {\r\n  HeaderComponent,\r\n  HeaderTitleComponent,\r\n  HeaderSubTitleComponent,\r\n  HeaderLogoComponent\r\n} from './header.styles';\r\n\r\nconst Header = () => (\r\n  <HeaderComponent>\r\n    <HeaderLogoComponent src={`${process.env.PUBLIC_URL}/logo.png`} />\r\n    <HeaderTitleComponent>Strydo App</HeaderTitleComponent>\r\n    <HeaderSubTitleComponent>\r\n      a lightweight kanban board showcase app\r\n    </HeaderSubTitleComponent>\r\n  </HeaderComponent>\r\n);\r\n\r\nexport default Header;\r\n","export const ItemTypes = {\r\n  CARD: 'card'\r\n};\r\n","import styled from 'styled-components';\r\n\r\nexport const RemoveCardContainer = styled.button`\r\n  cursor: pointer;\r\n  margin-top: 15px;\r\n  padding: 5px;\r\n  text-align: center;\r\n  width: 100%;\r\n\r\n  &:hover {\r\n    color: grey;\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { removeCard } from '../../redux/board/board.action';\r\n\r\nimport { RemoveCardContainer } from './remove-card.styles';\r\n\r\nexport const RemoveCard = ({ columnId, cardId, removeCard }) => (\r\n  <RemoveCardContainer\r\n    data-testid='remove-card-handler'\r\n    onClick={() => removeCard({ columnId, cardId })}\r\n  >\r\n    - remove card\r\n  </RemoveCardContainer>\r\n);\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  removeCard: ({ columnId, cardId }) =>\r\n    dispatch(removeCard({ columnId, cardId }))\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(RemoveCard);\r\n","import BoardActionTypes from './board.types';\r\n\r\nexport const getBoardData = () => ({\r\n  type: BoardActionTypes.GET_BOARD_DATA\r\n});\r\n\r\nexport const removeCard = ({ columnId, cardId }) => ({\r\n  type: BoardActionTypes.REMOVE_CARD,\r\n  payload: { columnId, cardId }\r\n});\r\n\r\nexport const addCard = columnId => ({\r\n  type: BoardActionTypes.ADD_CARD,\r\n  payload: columnId\r\n});\r\n\r\nexport const moveCard = ({\r\n  columnId,\r\n  cardId,\r\n  targetColumnId,\r\n  targetIndex\r\n}) => ({\r\n  type: BoardActionTypes.MOVE_CARD,\r\n  payload: { columnId, cardId, targetColumnId, targetIndex }\r\n});\r\n","import styled from 'styled-components';\r\n\r\nexport const MoveCardContainer = styled.div`\r\n  height: ${({ isOver }) => (isOver ? '100px' : '5px')};\r\n  padding: 5px;\r\n`;\r\n\r\nexport const MoveCardPlaceholderContainer = styled.div`\r\n  background: ${({ isOver }) => (isOver ? 'snow' : 'none')};\r\n  border: ${({ isOver }) => (isOver ? '1px dashed grey' : 'none')};\r\n  height: 100%;\r\n`;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { useDrop } from 'react-dnd';\r\n\r\nimport { ItemTypes } from '../../dnd/itemtypes';\r\n\r\nimport { moveCard } from '../../redux/board/board.action';\r\n\r\nimport {\r\n  MoveCardContainer,\r\n  MoveCardPlaceholderContainer\r\n} from './move-card.styles';\r\n\r\nexport const MoveCard = ({ idx, columnId, moveCard }) => {\r\n  const [{ isOver }, drop] = useDrop({\r\n    accept: ItemTypes.CARD,\r\n    drop: item =>\r\n      moveCard({\r\n        columnId: item.columnId,\r\n        cardId: item.id,\r\n        targetColumnId: columnId,\r\n        targetIndex: idx\r\n      }),\r\n    collect: monitor => ({\r\n      isOver: !!monitor.isOver(),\r\n      canDrop: !!monitor.canDrop()\r\n    })\r\n  });\r\n\r\n  return (\r\n    <MoveCardContainer\r\n      ref={drop}\r\n      isOver={isOver}\r\n      data-testid='move-card-handler'\r\n    >\r\n      <MoveCardPlaceholderContainer isOver={isOver} />\r\n    </MoveCardContainer>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  moveCard: ({ columnId, cardId, targetColumnId, targetIndex }) =>\r\n    dispatch(moveCard({ columnId, cardId, targetColumnId, targetIndex }))\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(MoveCard);\r\n","import styled from 'styled-components';\r\n\r\nexport const CardContainer = styled.div`\r\n  border: 1px solid silver;\r\n  margin: 0 5px;\r\n  padding: 15px 20px;\r\n\r\n  &:hover {\r\n    background-color: whitesmoke;\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport { useDrag } from 'react-dnd';\r\n\r\nimport { ItemTypes } from '../../dnd/itemtypes';\r\n\r\nimport RemoveCard from '../remove-card/remove-card.component';\r\nimport MoveCard from '../move-card/move-card.component';\r\n\r\nimport { CardContainer } from './card.styles';\r\n\r\nexport const Card = ({ id, idx, columnId, children }) => {\r\n  const [{ isDragging }, drag] = useDrag({\r\n    item: { type: ItemTypes.CARD, id, columnId },\r\n    collect: monitor => ({\r\n      isDragging: !!monitor.isDragging()\r\n    })\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <CardContainer\r\n        id={id}\r\n        data-testid='card'\r\n        ref={drag}\r\n        isDragging={isDragging}\r\n      >\r\n        {children}\r\n        <RemoveCard columnId={columnId} cardId={id} />\r\n      </CardContainer>\r\n      <MoveCard idx={++idx} columnId={columnId} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import styled from 'styled-components';\r\n\r\nexport const ColumnContainer = styled.div`\r\n  border: 1px solid grey;\r\n`;\r\n\r\nexport const H3Container = styled.h3`\r\n  background-color: ${({ backgroundColor }) => `${backgroundColor}`};\r\n  font-size: 15px;\r\n  margin: 0;\r\n  padding: 10px;\r\n`;\r\n\r\nexport const CardsContainer = styled.div`\r\n  border-top: 1px solid grey;\r\n`;\r\n","import React from 'react';\r\n\r\nimport { Card } from '../card/card.component';\r\nimport { MoveCard } from '../move-card/move-card.component';\r\n\r\nimport { ColumnContainer, H3Container, CardsContainer } from './column.styles';\r\n\r\nexport const Column = ({ id, title, backgroundColor, cards }) => (\r\n  <ColumnContainer id={id}>\r\n    <H3Container backgroundColor={backgroundColor}>{title}</H3Container>\r\n    <CardsContainer>\r\n      <MoveCard idx={0} columnId={id} />\r\n      {cards.map((card, idx) => (\r\n        <Card key={card.id} id={card.id} idx={idx} columnId={id}>\r\n          {card.content}\r\n        </Card>\r\n      ))}\r\n    </CardsContainer>\r\n  </ColumnContainer>\r\n);\r\n\r\nexport default Column;\r\n","import styled from 'styled-components';\r\n\r\nexport const AddCardContainer = styled.button`\r\n  cursor: pointer;\r\n  margin-top: 15px;\r\n  padding: 5px;\r\n  text-align: center;\r\n  width: 100%;\r\n\r\n  &:hover {\r\n    color: grey;\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { addCard } from '../../redux/board/board.action';\r\n\r\nimport { AddCardContainer } from './add-card.styles';\r\n\r\nexport const AddCard = ({ columnId, addCard }) => (\r\n  <AddCardContainer\r\n    data-testid='add-card-handler'\r\n    onClick={() => addCard(columnId)}\r\n  >\r\n    + add card\r\n  </AddCardContainer>\r\n);\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  addCard: columnId => dispatch(addCard(columnId))\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(AddCard);\r\n","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { GlobalStyle } from './global.styles';\r\nimport { ColumnsContainer } from './App.styles';\r\n\r\nimport Header from './components/header/header.component';\r\nimport Column from './components/column/column.component';\r\nimport AddCard from './components/add-card/add-card.component';\r\n\r\nimport { getBoardData } from './redux/board/board.action';\r\n\r\nconst App = ({ columns, getBoardData }) => {\r\n  useEffect(() => {\r\n    getBoardData();\r\n  }, [getBoardData]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <GlobalStyle />\r\n      <Header />\r\n      <ColumnsContainer>\r\n        {columns.map(column => (\r\n          <div key={column.id}>\r\n            <Column {...column} />\r\n            <AddCard columnId={column.id} />\r\n          </div>\r\n        ))}\r\n      </ColumnsContainer>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ board: { columns } }) => ({\r\n  columns\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  getBoardData: () => dispatch(getBoardData())\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux/store';\r\nimport { DndProvider } from 'react-dnd';\r\nimport Backend from 'react-dnd-html5-backend';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <DndProvider backend={Backend}>\r\n      <App />\r\n    </DndProvider>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}